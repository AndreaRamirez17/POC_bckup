name: 'Code Quality Analysis'
on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '17'
    secrets:
      GITHUB_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_PROJECT_KEY:
        required: true
        
    outputs:
      quality-gate-status:
        description: 'Quality gate status (PASSED/FAILED/UNKNOWN)'
        value: ${{ jobs.code-quality.outputs.quality-gate-status }}
      sonarqube-configured:
        description: 'Whether SonarQube is properly configured'
        value: ${{ jobs.code-quality.outputs.sonarqube-configured }}
      sonar-gate-exit-code:
        description: 'Exit code from SonarQube quality gate analysis'
        value: ${{ jobs.code-quality.outputs.sonar-gate-exit-code }}

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    outputs:
      quality-gate-status: ${{ steps.sonarqube_scan.outputs.QUALITY_GATE_STATUS }}
      sonarqube-configured: ${{ steps.sonarqube_scan.outputs.SONARQUBE_CONFIGURED }}
      sonar-gate-exit-code: ${{ steps.sonarqube_scan.outputs.SONAR_GATE_EXIT_CODE }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java and Maven
        uses: ./.github/actions/setup-java-maven
        with:
          java-version: ${{ inputs.java-version }}
          
      - name: Download build artifacts
        uses: ./.github/actions/download-build-artifacts
          
      - name: Validate SonarQube configuration
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          chmod +x sonarqube-cloud-scanning/scripts/validate-sonarqube.sh
          
          # Run validation and capture exit code
          ./sonarqube-cloud-scanning/scripts/validate-sonarqube.sh && echo "SONARQUBE_VALIDATED=true" >> $GITHUB_ENV || echo "SONARQUBE_VALIDATED=false" >> $GITHUB_ENV

      - name: Run SonarQube Cloud Analysis
        id: sonarqube_scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          if [ -z "$SONAR_TOKEN" ] || [ "$SONARQUBE_VALIDATED" = "false" ]; then
            echo "⚠️ SonarQube Cloud not configured or validation failed - skipping code quality analysis"
            echo "SONARQUBE_CONFIGURED=false" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
            echo "SonarQube Cloud is not configured. Set SONAR_TOKEN secret to enable." >> $GITHUB_STEP_SUMMARY
          else
            echo "🔍 Running SonarQube Cloud analysis..."
            echo "SONARQUBE_CONFIGURED=true" >> $GITHUB_OUTPUT
            
            # Verify Java version for SonarQube
            echo "🔍 Verifying Java setup for SonarQube analysis..."
            echo "JAVA_HOME: $JAVA_HOME"
            java -version
            mvn -version
            
            cd microservice-moc-app
            
            # Verify compiled classes exist
            echo "🔍 Verifying compiled classes for SonarQube analysis..."
            ls -la target/classes/ || echo "⚠️ No compiled classes found, will compile first"
            
            # Ensure classes are compiled for SonarQube analysis
            if [ ! -d "target/classes" ]; then
              echo "📦 Compiling classes for SonarQube analysis..."
              mvn compile
            fi
            
            # Run SonarQube analysis with quality gate wait
            mvn sonar:sonar \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.organization=${SONAR_ORGANIZATION:-your-organization-key} \
              -Dsonar.projectKey=${SONAR_PROJECT_KEY:-cicd-pipeline-poc} \
              -Dsonar.projectName="CI/CD Pipeline Security POC" \
              -Dsonar.projectVersion=1.0.0 \
              -Dsonar.java.binaries=target/classes \
              -Dsonar.qualitygate.wait=true \
              -Dsonar.qualitygate.timeout=300 || SONAR_EXIT_CODE=$?
            
            cd ..
            
            # Capture quality gate status with better error handling
            if [ "${SONAR_EXIT_CODE:-0}" -eq 0 ]; then
              echo "QUALITY_GATE_STATUS=PASSED" >> $GITHUB_OUTPUT
              QG_STATUS="✅ PASSED"
              echo "✅ SonarQube analysis completed successfully"
            else
              echo "QUALITY_GATE_STATUS=FAILED" >> $GITHUB_OUTPUT
              QG_STATUS="❌ FAILED"
              echo "❌ SonarQube analysis completed with quality gate failure (exit code: ${SONAR_EXIT_CODE})"
              
              # Don't fail the step here - let the gate evaluation handle it
              echo "⚠️ Quality gate will be evaluated in the security-gates job"
            fi
            
            # Run quality gate analysis and capture exit code
            chmod +x sonarqube-cloud-scanning/scripts/analyze-quality-gates.sh
            
            echo "🔍 Running detailed quality gate analysis..."
            
            # Disable exit on error temporarily to capture exit code
            set +e
            ./sonarqube-cloud-scanning/scripts/analyze-quality-gates.sh \
              -k "${SONAR_PROJECT_KEY:-cicd-pipeline-poc}" \
              -o sonarqube-cloud-scanning/results/quality-gate-result.json
            SONAR_GATE_EXIT_CODE=$?
            set -e
            
            # Handle different exit codes from the analysis script
            case "$SONAR_GATE_EXIT_CODE" in
              0)
                echo "✅ Quality gate analysis completed successfully"
                ;;
              1)
                echo "⚠️ Quality gate analysis completed with warnings"
                ;;
              2)
                echo "❌ Quality gate analysis failed - check quality standards"
                ;;
              *)
                echo "❓ Quality gate analysis returned unexpected exit code: $SONAR_GATE_EXIT_CODE"
                ;;
            esac
            
            # Store the exit code for later evaluation
            echo "SONAR_GATE_EXIT_CODE=$SONAR_GATE_EXIT_CODE" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate quality summary
        if: steps.sonarqube_scan.outputs.SONARQUBE_CONFIGURED == 'true'
        uses: ./.github/actions/generate-quality-summary
        with:
          results-file: sonarqube-cloud-scanning/results/quality-gate-result.json
          project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          branch-name: ${{ github.ref_name }}
          
      - name: Upload quality results
        uses: actions/upload-artifact@v4
        with:
          name: quality-results
          path: |
            sonarqube-cloud-scanning/results/quality-gate-result.json
          if-no-files-found: warn
          retention-days: 1