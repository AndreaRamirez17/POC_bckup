name: CI/CD Security Gating Pipeline (Modular)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      override_gates:
        description: 'Override security gates (requires approval)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      user_role:
        description: 'User role for testing (configure in Permit.io)'
        required: false
        default: 'ci-pipeline'
        type: choice
        options:
          - 'ci-pipeline'
          - 'developer'
          - 'editor'
          - 'security-admin'

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.8.6'
  DOCKER_BUILDKIT: 1
  PDP_URL: http://localhost:7766

jobs:
  build:
    name: Build Application
    uses: ./.github/workflows/build-application.yml
    with:
      java-version: '17'
      maven-version: '3.8.6'
          
  security-scan:
    name: Security Scan
    needs: build
    uses: ./.github/workflows/security-scanning.yml
    with:
      java-version: '17'
      run-container-scan: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    secrets:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG_ID: ${{ secrets.SNYK_ORG_ID }}

  code-quality:
    name: Code Quality Analysis
    needs: build
    uses: ./.github/workflows/quality-analysis.yml
    with:
      java-version: '17'
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          
  security-gates:
    name: Security Gate Evaluation
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download security results
        uses: actions/download-artifact@v4
        with:
          name: security-results
          path: .
          
      - name: Download quality results
        uses: actions/download-artifact@v4
        with:
          name: quality-results
          path: .
        continue-on-error: true
          
      - name: Process Security Artifacts
        id: process_artifacts
        run: |
          echo "üìÅ Processing security scan artifacts..."
          mkdir -p snyk-scanning/results sonarqube-cloud-scanning/results
          
          ARTIFACTS_PROCESSED=0
          
          # Process Snyk vulnerability results
          if [ -f "snyk-results.json" ]; then
            if jq empty snyk-results.json 2>/dev/null; then
              mv snyk-results.json snyk-scanning/results/
              echo "‚úÖ Snyk vulnerability scan results processed"
              ARTIFACTS_PROCESSED=$((ARTIFACTS_PROCESSED + 1))
            else
              echo "‚ö†Ô∏è Invalid JSON in snyk-results.json - skipping"
            fi
          else
            echo "‚ÑπÔ∏è snyk-results.json not found"
          fi
          
          # Process Snyk code analysis results  
          if [ -f "snyk-code-results.json" ]; then
            if jq empty snyk-code-results.json 2>/dev/null; then
              mv snyk-code-results.json snyk-scanning/results/
              echo "‚úÖ Snyk code analysis results processed"
              ARTIFACTS_PROCESSED=$((ARTIFACTS_PROCESSED + 1))
            else
              echo "‚ö†Ô∏è Invalid JSON in snyk-code-results.json - skipping"
            fi
          else
            echo "‚ÑπÔ∏è snyk-code-results.json not found"
          fi
          
          # Process Snyk container results
          if [ -f "snyk-container-results.json" ]; then
            if jq empty snyk-container-results.json 2>/dev/null; then
              mv snyk-container-results.json snyk-scanning/results/
              echo "‚úÖ Snyk container scan results processed"
              ARTIFACTS_PROCESSED=$((ARTIFACTS_PROCESSED + 1))
            else
              echo "‚ö†Ô∏è Invalid JSON in snyk-container-results.json - skipping"
            fi
          else
            echo "‚ÑπÔ∏è snyk-container-results.json not found"
          fi
          
          # Process SonarQube quality results
          if [ -f "quality-gate-result.json" ]; then
            if jq empty quality-gate-result.json 2>/dev/null; then
              mv quality-gate-result.json sonarqube-cloud-scanning/results/
              echo "‚úÖ SonarQube quality gate results processed"
              ARTIFACTS_PROCESSED=$((ARTIFACTS_PROCESSED + 1))
            else
              echo "‚ö†Ô∏è Invalid JSON in quality-gate-result.json - skipping"
            fi
          else
            echo "‚ÑπÔ∏è quality-gate-result.json not found"
          fi
          
          echo "üìä Summary: Processed $ARTIFACTS_PROCESSED artifact(s)"
          echo "ARTIFACTS_COUNT=$ARTIFACTS_PROCESSED" >> $GITHUB_OUTPUT
          
          # Show final directory structure
          echo "üìã Final artifact locations:"
          find snyk-scanning sonarqube-cloud-scanning -name "*.json" 2>/dev/null || echo "No JSON artifacts found"
          
      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Validate Pipeline Configuration
        env:
          PERMIT_API_KEY: ${{ secrets.PERMIT_API_KEY }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG_ID: ${{ secrets.SNYK_ORG_ID }}
        run: |
          echo "üîç Validating pipeline configuration..."
          
          # Check required secrets
          MISSING_SECRETS=""
          for secret in PERMIT_API_KEY SNYK_TOKEN SNYK_ORG_ID; do
            if [ -z "${!secret}" ]; then
              MISSING_SECRETS="${MISSING_SECRETS} $secret"
            fi
          done
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "‚ùå Missing required secrets:$MISSING_SECRETS"
            echo "üí° Please configure these secrets in repository settings"
            exit 1
          fi
          
          # Validate workflow inputs
          USER_ROLE="${{ github.event.inputs.user_role || 'editor' }}"
          VALID_ROLES="ci-pipeline developer editor security-admin"
          
          if [[ ! " $VALID_ROLES " =~ " $USER_ROLE " ]]; then
            echo "‚ùå Invalid user role: $USER_ROLE"
            echo "‚úÖ Valid options: $VALID_ROLES"
            exit 1
          fi
          
          echo "‚úÖ Configuration validation passed"
          echo "   Role: $USER_ROLE"
          echo "   User: ${{ github.actor }}"
          
          # Run original Permit.io validation
          chmod +x permit-gating/scripts/validate-permit.sh
          ./permit-gating/scripts/validate-permit.sh

      - name: Start Docker Compose services
        env:
          PERMIT_API_KEY: ${{ secrets.PERMIT_API_KEY }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG_ID: ${{ secrets.SNYK_ORG_ID }}
          USER_KEY: ${{ github.actor }}
          USER_ROLE: ${{ github.event.inputs.user_role || 'editor' }}
        run: |
          # Track performance metrics
          DOCKER_START_TIME=$(date +%s)
          # Create .env file only for Docker Compose (required by docker-compose.yml)
          cat > .env << EOF
          PERMIT_API_KEY=$PERMIT_API_KEY
          SNYK_TOKEN=$SNYK_TOKEN
          SNYK_ORG_ID=$SNYK_ORG_ID
          USER_KEY=${USER_KEY}
          USER_ROLE=${USER_ROLE}
          EOF
          
          # Start Docker Compose services with smart image management
          echo "üê≥ Optimizing Docker image downloads..."
          
          # Check existing images to avoid unnecessary downloads
          echo "üîç Checking cached images..."
          docker image ls --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}" | grep -E "(permitio|redis|gating)" || echo "No cached images found"
          
          # Pull only missing images with parallel downloads
          echo "üì• Pulling missing Docker images..."
          docker compose pull --ignore-pull-failures
          
          # Start services (removed --build to use cached images when possible)
          echo "üöÄ Starting Docker services..."
          docker compose up -d
          
          # Smart health checking with exponential backoff
          echo "üè• Waiting for services to become healthy..."
          TOTAL_WAIT=0
          MAX_WAIT=120
          
          # Exponential backoff: 1s, 2s, 4s, 8s, 15s, 30s, then 30s intervals
          for WAIT_TIME in 1 2 4 8 15 30 30 30; do
            if curl -sf http://localhost:7001/healthy > /dev/null 2>&1; then
              echo "‚úÖ PDP health endpoint ready after ${TOTAL_WAIT}s"
              break
            elif [ $TOTAL_WAIT -ge $MAX_WAIT ]; then
              echo "‚ùå PDP failed to become ready after ${TOTAL_WAIT}s"
              echo "üîç Container logs:"
              docker compose logs permit-pdp --tail=10
              exit 1
            else
              echo "‚è≥ PDP not ready yet, waiting ${WAIT_TIME}s... (total: ${TOTAL_WAIT}s)"
              sleep $WAIT_TIME
              TOTAL_WAIT=$((TOTAL_WAIT + WAIT_TIME))
            fi
          done
          
          # Calculate and report performance metrics
          DOCKER_END_TIME=$(date +%s)
          DOCKER_TOTAL_TIME=$((DOCKER_END_TIME - DOCKER_START_TIME))
          echo "‚è±Ô∏è Docker startup completed in ${DOCKER_TOTAL_TIME}s"
          echo "üöÄ Performance improvements applied:"
          echo "   ‚úÖ Smart image caching (skip downloads for existing images)"
          echo "   ‚úÖ Exponential backoff health checking (vs fixed 30s wait)"
          echo "   ‚úÖ Parallel image pulls for missing images"
          echo "   ‚úÖ Enhanced error reporting with timing information"
          
          # Verify PDP is fully synced with Permit.io cloud
          echo "Verifying PDP sync with Permit.io cloud..."
          for i in {1..20}; do
            response=$(curl -s -X POST http://localhost:7766/allowed \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $PERMIT_API_KEY" \
              -d '{"user":{"key":"david-santander","attributes":{"role":"editor"}},"action":"test","resource":{"type":"deployment","key":"sync-test","attributes":{}}}' 2>/dev/null || echo "{}")
            
            if echo "$response" | grep -q '"synced":true'; then
              echo "‚úì PDP is fully synced with Permit.io cloud"
              break
            elif [ $i -eq 20 ]; then
              echo "‚ö†Ô∏è PDP sync verification timeout - proceeding anyway"
            else
              echo "  Waiting for PDP to sync with cloud... ($i/20)"
              sleep 3
            fi
          done
          
      - name: Debug User Context
        run: |
          echo "üîç GitHub Context Debug:"
          echo "  GitHub Actor: ${{ github.actor }}"
          echo "  User Role Input: ${{ github.event.inputs.user_role }}"
          
      - name: Evaluate Security Gates
        id: gate_evaluation
        env:
          PDP_URL: ${{ env.PDP_URL }}
          PERMIT_API_KEY: ${{ secrets.PERMIT_API_KEY }}
          USER_KEY: ${{ github.actor }}
          USER_ROLE: ${{ github.event.inputs.user_role || 'editor' }}
        run: |
          echo "üîê Evaluating security gates:"
          echo "  Permit.io User Key: ${USER_KEY}"
          echo "  Permit.io User Role: ${USER_ROLE}"
          echo "  GitHub Actor: ${{ github.actor }}"
          echo ""
          
          # Initialize gate results
          SECURITY_GATE_RESULT=0
          QUALITY_GATE_RESULT=0
          
          # Run security vulnerability gate evaluation
          echo "Evaluating security vulnerability gates..."
          chmod +x permit-gating/scripts/evaluate-gates.sh
          
          # Disable exit on error temporarily to capture exit code
          set +e
          ./permit-gating/scripts/evaluate-gates.sh snyk-scanning/results/snyk-results.json
          SECURITY_GATE_RESULT=$?
          set -e
          
          # Check SonarQube quality gate if configured
          if [ -f "sonarqube-cloud-scanning/results/quality-gate-result.json" ]; then
            echo ""
            echo "Evaluating code quality gates..."
            
            QG_DECISION=$(jq -r '.quality_gate.decision // "UNKNOWN"' sonarqube-cloud-scanning/results/quality-gate-result.json)
            QG_REASON=$(jq -r '.quality_gate.reason // "No reason provided"' sonarqube-cloud-scanning/results/quality-gate-result.json)
            QG_EXIT_CODE=$(jq -r '.gate_result.exit_code // 0' sonarqube-cloud-scanning/results/quality-gate-result.json)
            
            case "$QG_EXIT_CODE" in
              0)
                echo "‚úÖ Code quality gate: PASSED - $QG_REASON"
                QUALITY_GATE_RESULT=0
                ;;
              1)
                echo "‚ö†Ô∏è Code quality gate: WARNING - $QG_REASON"
                QUALITY_GATE_RESULT=1
                ;;
              2)
                echo "‚ùå Code quality gate: FAILED - $QG_REASON"
                QUALITY_GATE_RESULT=2
                ;;
              *)
                echo "‚ùì Code quality gate: UNKNOWN - $QG_REASON"
                QUALITY_GATE_RESULT=0
                ;;
            esac
          else
            echo "‚ÑπÔ∏è SonarQube quality gate not evaluated (not configured or results not available)"
            QUALITY_GATE_RESULT=0
          fi
          
          # Combine gate results (take the worst result)
          if [ $SECURITY_GATE_RESULT -eq 2 ] || [ $QUALITY_GATE_RESULT -eq 2 ]; then
            GATE_RESULT=2  # FAIL
            echo ""
            echo "üö´ Combined gate decision: BLOCKED"
          elif [ $SECURITY_GATE_RESULT -eq 1 ] || [ $QUALITY_GATE_RESULT -eq 1 ]; then
            GATE_RESULT=1  # WARNING
            echo ""
            echo "‚ö†Ô∏è Combined gate decision: WARNING"
          else
            GATE_RESULT=0  # PASS
            echo ""
            echo "‚úÖ Combined gate decision: PASSED"
          fi
          
          echo "GATE_RESULT=$GATE_RESULT" >> $GITHUB_OUTPUT
          echo "SECURITY_GATE_RESULT=$SECURITY_GATE_RESULT" >> $GITHUB_OUTPUT
          echo "QUALITY_GATE_RESULT=$QUALITY_GATE_RESULT" >> $GITHUB_OUTPUT
          
          # Wait for audit logs to be sent to Permit.io cloud
          echo "Waiting for audit logs to be sent to Permit.io..."
          sleep 10
          
          # Check PDP logs for audit log confirmation
          echo "Checking PDP logs for audit activity..."
          docker compose logs permit-pdp --tail=20 | grep -i "audit\|log" || echo "No audit log entries found in recent logs"
          
          # Enhanced summary generation
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üö™ Security Gate Evaluation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîê Authorization Context" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üë§ User | ${USER_KEY} |" >> $GITHUB_STEP_SUMMARY
          echo "| üé≠ Role | ${USER_ROLE} |" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Policy Engine | Permit.io PDP |" >> $GITHUB_STEP_SUMMARY
          echo "| üîó Audit Trail | [View in Permit.io](https://app.permit.io) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set job status based on gate result
          case $GATE_RESULT in
            0)
              echo "### ‚úÖ Gate Decision: **PASSED**" >> $GITHUB_STEP_SUMMARY
              echo "üéâ **Result:** All security requirements met. Deployment authorized." >> $GITHUB_STEP_SUMMARY
              exit 0
              ;;
            1)
              echo "### ‚ö†Ô∏è Gate Decision: **WARNING**" >> $GITHUB_STEP_SUMMARY
              echo "üìã **Result:** Non-blocking issues detected. Proceeding with caution." >> $GITHUB_STEP_SUMMARY
              exit 0
              ;;
            2)
              echo "### ‚ùå Gate Decision: **BLOCKED**" >> $GITHUB_STEP_SUMMARY
              echo "üõë **Result:** Security requirements not met. Deployment blocked by policy." >> $GITHUB_STEP_SUMMARY
              
              if [ "${{ github.event.inputs.override_gates }}" != "true" ]; then
                exit 2
              else
                echo "‚ö†Ô∏è **OVERRIDE ACTIVATED** - Gates bypassed by authorized user" >> $GITHUB_STEP_SUMMARY
                exit 0
              fi
              ;;
            *)
              echo "### ‚ùì Gate Decision: **ERROR**" >> $GITHUB_STEP_SUMMARY
              exit 2
              ;;
          esac
          
      - name: Stop Docker Compose services
        if: always()
        run: |
          docker compose down
          
  build-docker-image:
    name: Build Docker Image
    needs: security-gates
    if: success() || (github.event.inputs.override_gates == 'true')
    uses: ./.github/workflows/docker-build.yml
    with:
      image-tag: ${{ github.sha }}
      load-prebuilt-image: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
          
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main' && (success() || github.event.inputs.override_gates == 'true')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          
      - name: Load Docker image
        run: |
          docker load < gating-poc-app.tar
          
      - name: Deploy to environment
        run: |
          echo "üöÄ Deploying application version ${{ github.sha }}"
          
          # Capture deployment start time
          DEPLOY_START=$(date +%s)
          
          # Add actual deployment steps here
          # For PoC, we'll just run the container locally
          docker run -d -p 8080:8080 --name gating-poc-app gating-poc-app:${{ github.sha }}
          
          # Wait for application to start
          sleep 10
          
          # Health check
          HEALTH_STATUS="Unknown"
          if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
            HEALTH_STATUS="Healthy"
            HEALTH_ICON="‚úÖ"
          else
            HEALTH_STATUS="Unhealthy"
            HEALTH_ICON="‚ùå"
            exit 1
          fi
          
          # Calculate deployment time
          DEPLOY_END=$(date +%s)
          DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
          
          # Enhanced deployment summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üöÄ Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Status | **‚úÖ SUCCESS** |" >> $GITHUB_STEP_SUMMARY
          echo "| üè∑Ô∏è Version | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| üåç Environment | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è±Ô∏è Deploy Time | ${DEPLOY_TIME}s |" >> $GITHUB_STEP_SUMMARY
          echo "| üíö Health Check | ${HEALTH_ICON} ${HEALTH_STATUS} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÄ Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üë§ Deployed By | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìÖ Timestamp | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.override_gates }}" = "true" ]; then
            echo "‚ö†Ô∏è **Note:** Security gates were overridden for this deployment." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Cleanup
        if: always()
        run: |
          docker stop gating-poc-app || true
          docker rm gating-poc-app || true